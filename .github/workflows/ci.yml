name: Get check and decide on next steps

on:
  # This runs whenever a PR is opened
  # And PR is being reviewed (someone submits a review)
  pull_request:
  pull_request_review:
  
jobs:
  test-pr:
    name: Test Pull Request
  
    if: ${{ github.event_name == 'pull_request' }}

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set check required or not in a PR
      id: set
      run: |
        required=$(cat .review)
        echo "required=$required" >> $GITHUB_OUTPUT

    outputs:
      required: ${{ steps.set.outputs.required }}
      
  check-review-status:
    runs-on: ubuntu-latest

    env:
      security_review_context: security-review
      security_team: security-team

      PR_NUMBER: ${{ github.event.number || github.event.pull_request.number }}

    needs:
    - test-pr

    if: |
      always() &&
      needs.test-pr.result == 'success' || needs.test-pr.result == 'skipped'

    name: ${{ github.event_name == 'pull_request' && 'Set' || 'Update' }} Pull Request Status Checks
      
    steps:

    # DEBUG EVENT
    
    - env: 
          DEBUG: ${{ toJson(github.event) }}
      run: |
        echo $DEBUG

    # Need to check if using gh pr CLI
    - uses: actions/checkout@v4
    
    - name: Get GitHub app token
      uses: actions/create-github-app-token@v1
      id: app-token
      with:
        app-id: ${{ secrets.LAB_APP_ID }}
        private-key: ${{ secrets.LAB_APP_PRIVATE_KEY }}
        owner: ${{ github.repository_owner }}

    - if: github.event_name == 'pull_request' && needs.test-pr.outputs.required == 'false'
      name: Skip status check if it's not required
      run: |      
          gh api -X POST /repos/${{ github.repository }}/statuses/${{ github.sha }} \
            -f "state=success" \
            -f "description=Skipped required review." \
            -f "context=${{ env.security_review_context }}"
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}

    # Unfortunately, interpolating github.event.pull_request_review is impossible, 
    # because labels that are added after a PR is created is not tracked in GitHub context
    
    - if: github.event_name == 'pull_request_review'
      id: check-security-label
      name: Check if we have labelled PR before
      run: |
        labeled=$(gh api /repos/${{ github.repository }}/pulls/${{ env.PR_NUMBER }} \
          -q 'any(.labels[]; .name == "${{ env.security_review_context }}")')

        echo "Check security label: ${labeled}"
        echo "labeled=$labeled" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
        
    # If this is a pull_request event, and warning is True, we ping the team
    # If this is a pull_request_review, we check if it's labeled, and still ping the team
    # This action will update the status check if the team has already reviewed
    
    - if: |
        (github.event_name == 'pull_request' && needs.test-pr.outputs.required == 'true') ||
        (github.event_name == 'pull_request_review' && steps.check-security-label.outputs.labeled == 'true')
        
      name: Ping required team
      uses: Automattic/action-required-review@v4
      with:
        requirements: |
          - paths: unmatched
            teams:
              - ${{ env.security_team }}
        status: ${{ env.security_review_context }}
        request-reviews: true
        token: ${{ steps.app-token.outputs.token }}

    # Label PR
    # Only in a PR, and when we ping the security team
    
    - if: |
        (github.event_name == 'pull_request' && needs.test-pr.outputs.required == 'true')
      name: Label PR 
      run: gh pr edit ${{ env.PR_NUMBER }} --add-label ${{ env.security_review_context }}
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
